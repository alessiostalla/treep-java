set! environment:global
  environment:extend environment:global 'macro 'def
    macro (type name macro:body)
      `do
        ,if (eq type 'constant)
          `set! environment:global
            environment:extend environment:global 'constant ',name ,(head macro:body) #Do no checks here - this is the minimal version
          if (eq type 'variable)
            `set! environment:global
              environment:extend environment:global 'variable ',name (variable ,(head macro:body)) #Do no checks here - this is the minimal version
            if (eq type 'function)
              `set! environment:global
                environment:extend environment:global 'function ',name (function ,@macro:body)
              if (eq type 'macro)
                `set! environment:global
                  environment:extend environment:global 'macro ',name (macro ,@macro:body)
                error 'unsupported-definition
        `,name

def function null? (x)
  eq x nil

def function not (x)
  if x nil t

def function cons:map ((function f) tree)
  if (null? tree) nil (cons (f (tree:head tree)) (cons:map (tree:tail tree)))

def function tree:first (tree)
  cons:head tree

def function tree:second (tree)
  cons:head (cons:tail tree)

def function tree:third (tree)
  cons:head (cons:tail (cons:tail tree))

def macro cond (macro:body)
  if (not (null? macro:body))
    `(if ,(cons:head (cons:head macro:body))
        (do ,@(cons:tail (cons:head macro:body)))
        (cond ,@(cons:tail macro:body)))

def macro let (bindings macro:body)
  #Do no checks here - this is the minimal version
  cond
    (null? bindings)
      `(do ,@macro:body)
    (eq 'constant (tree:first (tree:first bindings)))
      `with-environment (environment:extend environment:local
                         'constant ',(tree:second (tree:first bindings))
                         ,(tree:third (tree:first bindings)))
        (let ,(cons:tail bindings) ,@macro:body)
    (eq 'variable (tree:first (tree:first bindings)))
      `with-environment (environment:extend environment:local
                         'variable ',(tree:second (tree:first bindings))
                         (variable ,(tree:third (tree:first bindings))))
        (let ,(cons:tail bindings) ,@macro:body)
    (eq 'function (tree:first (tree:first bindings)))
      `with-environment (environment:extend environment:local
                         'function ',(tree:second (tree:first bindings))
                         (function ,@(cons:tail (cons:tail (tree:first bindings)))))
        (let ,(cons:tail bindings) ,@macro:body)
    (eq 'macro (tree:first (tree:first bindings)))
      `with-environment (environment:extend environment:local
                         'macro ',(tree:second (tree:first bindings))
                         (macro ,@(cons:tail (cons:tail (tree:first bindings)))))
        (let ,(cons:tail bindings) ,@macro:body)
    t error 'unsupported-binding

